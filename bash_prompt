#!/usr/bin/env bash
# Shell prompt taken from
# https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt

prompt_git() {
  local s='';
  local branchName='';
  
  # Check if the current directory is in a git repo
  git rev-parse --is-inside-work-tree &>/dev/null || return;

  # Check for what branch we're on.
  # Get the short symbolic ref. If HEAD isn't a symbolic ref, get a
  # tracking remote branch or tag. Otherwise, get the
  # short SHA for the latest commit, or giveup
  branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
    git describe --all --exact-match HEAD 2> /dev/null || \
    git rev-parse --short HEAD 2> /dev/null || \
    echo '(unknown)')";

  # Check for uncommitted changes in the index.
  if ! $(git diff --quiet --ignore-submodules --cached); then
    s+='+'
  fi;
  # Check for unstaged changes 
  if ! $(git diff-files --quiet --ignore-submodules --); then 
    s+='!'
  fi;
  # Check for unstaged changes
  if [ -n "$(git ls-files --others --exclude-standard)" ]; then
    s+='?'
  fi;
  # Check for stashed files
  if $(git rev-parse --verify refs/stash &>/dev/null); then
    s+='$'
  fi;

  [ -n "${s}" ] && s=" [${s}]";

  echo -e "${1}${branchName}${2}${s}";
}

if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);
  # One Half Dark colors
  black=$(tput setaf 16);
  red=$(tput setaf 168);
  green=$(tput setaf 114);
  yellow=$(tput setaf 180);
  blue=$(tput setaf 75);
  magenta=$(tput setaf 176);
  cyan=$(tput setaf 73);
  white=$(tput setaf 188);
else 
  bold='';
  reset="\e[0m";
  black="\e[1;30m";
  blue="\e[1;34m";
  cyan="\e[1;36m";
  green="\e[1;32m";
  orange="\e[1;33m";
  purple="\e[1;35m";
  red="\e[1;31m";
  violet="\e[1;35m";
  white="\e[1;37m";
  yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="${red}";
else 
  userStyle="${yellow}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${red}";
else
  hostStyle="${yellow}"
fi;

# Change machine name if .name exists
machine_name() {
  if [[ -f $HOME/.name ]]; then
    cat $HOME/.name
  else 
    hostname
  fi
}

# Trim working directory. Only on bash 4 and above
PROMPT_DIRTRIM=3

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username

# Remove machine name if it is local
if [[ -f $HOME/.name && $(hostname) != "LAPTOP-3DU3RNMT" ]]; then 
  PS1+="\[${white}\] at ";
  PS1+="\[${hostStyle}\]\h"; # host
fi;

PS1+="\[${white}\] in ";
PS1+="\[${green}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${white}\] on \[${magenta}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\n";

# Set prompt to red if last command exited with non-zero code
if [ $? -ne 0 ]; then
  PS1+="asdf";
fi;
# PS1+="\$(if [ \$? -ne 0 ]; then echo \"${red}!\"; fi)";

PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]â†’ \[${reset}\]";
export PS2;
